7 9
1 2
1 3
1 7
2 3
3 7
2 4
4 5
3 6
5 6


5 5
1 0
0 2
2 1
0 3
1 4

///////graph er code

#include<bits/stdc++.h>
using namespace std;

vector <int> graph[5];

void printGraph(vector<int>graph[], int n){
    cout << "The graph is:" << endl;
    for (int i = 0; i < n; i++){
        cout << i << " -> ";
        for (int j = 0; j < graph[i].size(); j++){
            cout << graph[i][j] << ' ';
        }
        cout << endl;
    }
}

int main()
{
    int nodes, edges;
    cin >> nodes >> edges;
    for (int i = 0; i < edges; i++){
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u);
    }
    printGraph(graph, 5);
    return 0;
}




////////////////////bfs er code

#include<bits/stdc++.h>
using namespace std;

#define MX 110

vector < int > graph[MX];
bool vis[MX];
int dist[MX];

void bfs(int source){
    queue < int > Q;
    // initialization
    vis[source] = 1;
    dist[source] = 0;
    Q.push(source);

    while(!Q.empty()){
        int node = Q.front();
        //cout<<node<<' '; // etar output 1 2 3 7 4 5 6
        Q.pop();
        cout<<node<<' ';
        for (int i = 0; i < graph[node].size(); i++){
            int next = graph[node][i];
            if (vis[next] == 0){
                vis[next] = 1; // visit
                //dist[next] = dist[node] + 1; // update
                Q.push(next); // push to queue

            }
        }
    }
}

int main()
{
    int nodes, edges;
    cin >> nodes >> edges;

    for (int i = 1; i <= edges; i++){
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u);
    }

    int source;
    cin >> source;
    cout<<"The desired bfs is:"<<endl;
    bfs(source);

   /* cout << "From node " << source << endl;
    for (int i = 1; i <= nodes; i++){
        cout << "Distance of " << i << " is : " << dist[i] << endl;
    }*/
    return 0;
}







//////////////// dfs er code using stack

#include<bits/stdc++.h>
using namespace std;

#define MX 110

vector < int > graph[MX];
bool vis[MX];
//int dist[MX];

void dfs(int source){
    stack < int > Q;
    // initialization
    vis[source] = 1;
    //dist[source] = 0;
    Q.push(source);

    while(!Q.empty()){
        int node = Q.top();
        //cout<<node<<' '; // etar output 1 2 3 7 4 5 6
        Q.pop();
        cout<<node<<' ';
        for (int i = 0; i < graph[node].size(); i++){
            int next = graph[node][i];
            if (vis[next] == 0){
                vis[next] = 1; // visit
                Q.push(next); // push to queue

            }
        }
    }
}

int main()
{
    int nodes, edges;
    cin >> nodes >> edges;

    for (int i = 1; i <= edges; i++){
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u);
    }

    int source;
    cin >> source;
    cout<<"The desired bfs is:"<<endl;
    dfs(source);
    return 0;
}



////////////// dfs without using stack